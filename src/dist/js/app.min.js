function NoParkingSpotsException(a){this.name="NoParkingSpotsException",this.message=a,this.stack=(new Error).stack}function Parking(a,t,i,n,r){this.name=a,this.description=t,this.address=i,this.availableCapacity=n,this.totalCapacity=r}var config={url:"http://localhost:63342/ParkingPage/src/data/parkings.json",localUrl:"http://localhost:63342/ParkingPage/src/data/parkings.json",warningTreshold:30};NoParkingSpotsException.prototype=Object.create(Error.prototype),NoParkingSpotsException.prototype.constructor=NoParkingSpotsException;var parkingService=function(){"use strict";return{get:function(){var a=new XMLHttpRequest;if(a.open("GET",config.url,!1),a.send(null),200===a.status){for(var t=JSON.parse(a.responseText),i=[],n=0,r=t.Parkings.parkings.length;r>n;n++){var s=t.Parkings.parkings[n];""===s.availableCapacity&&(s.availableCapacity=0);var o=new Parking(s.name,s.description,s.address,s.availableCapacity,s.totalCapacity);i.push(o)}return i}},getById:function(){}}}(),vm={parkingSpots:null,showParkingSpots:function(a){if(!this.parkingSpots||"object"!=typeof this.parkingSpots)throw new NoParkingSpotsException("No parkingspots defined");for(var t=document.querySelector(a),i="",n=0,r=this.parkingSpots.length;r>n;n++){var s=this.parkingSpots[n],o=0,p="parking";s.availableCapacity>0&&(o=(s.availableCapacity/s.totalCapacity*100).toFixed(2)),0===o?p+=" parking-full":o<config.warningTreshold&&(p+=" parking-warning"),i+='<li class="'+p+'">',i+='<p class="parking-sign">P</p>',i+='<p class="parking-description">'+s.description+"</p>",i+='<p class="parking-stats">'+s.availableCapacity+"/"+s.totalCapacity+"</p>",i+="</li>"}t.innerHTML=i}};!function(){vm.parkingSpots=parkingService.get(),vm.showParkingSpots("#parkingSpots")}();
//# sourceMappingURL=data:application/json;base64,
